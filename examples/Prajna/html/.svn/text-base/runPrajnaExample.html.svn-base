<html xmlns:mwsh="http://www.mathworks.com/namespace/mcode/v1/syntaxhighlight.dtd">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   
      <!--
This HTML is auto-generated from an M-file.
To make changes, update the M-file and republish this document.
      -->
      <title>Toy Example from Stephen Prajna</title>
      <meta name="generator" content="MATLAB 7.2">
      <meta name="date" content="2007-01-17">
      <meta name="m-file" content="runPrajnaExample"><style>

body {
  background-color: white;
  margin:10px;
}

h1 {
  color: #990000; 
  font-size: x-large;
}

h2 {
  color: #990000;
  font-size: medium;
}

/* Make the text shrink to fit narrow windows, but not stretch too far in 
wide windows.  On Gecko-based browsers, the shrink-to-fit doesn't work. */ 
p,h1,h2,div.content div {
  /* for MATLAB's browser */
  width: 600px;
  /* for Mozilla, but the "width" tag overrides it anyway */
  max-width: 600px;
  /* for IE */
  width:expression(document.body.clientWidth > 620 ? "600px": "auto" );
}

pre.codeinput {
  background: #EEEEEE;
  padding: 10px;
}
@media print {
  pre.codeinput {word-wrap:break-word; width:100%;}
} 

span.keyword {color: #0000FF}
span.comment {color: #228B22}
span.string {color: #A020F0}
span.untermstring {color: #B20000}
span.syscmd {color: #B28C00}

pre.codeoutput {
  color: #666666;
  padding: 10px;
}

pre.error {
  color: red;
}

p.footer {
  text-align: right;
  font-size: xx-small;
  font-weight: lighter;
  font-style: italic;
  color: gray;
}

  </style></head>
   <body>
      <div class="content">
         <h1>Toy Example from Stephen Prajna</h1>
         <introduction>
            <p>The following is a modified example presented by Stephen Prajna at the 2003 IEEE Conference on Decision and Control.</p>
            <p>Consider a system with the goverening differential equation:</p>
            <p><img vspace="5" hspace="5" src="runPrajnaExample_eq11442.png"> </p>
            <p>From prior information we know</p>
            <p><img vspace="5" hspace="5" src="runPrajnaExample_eq3025.png"> </p>
            <p>And we have measurements of <tt>z</tt> at three times:
            </p>
            <p><img vspace="5" hspace="5" src="runPrajnaExample_eq108716.png"> </p>
            <p>To formulate this problem we shall take <tt>p1</tt> and <tt>z(0)</tt> as our two parameters.  There are two model files in the example folder called <tt>prajModel1</tt> and <tt>prajModel2</tt>.  Both files solve for z(t).  The first returns the value at time 2, the second at time 4.
            </p>
         </introduction>
         <h2>Contents</h2>
         <div>
            <ul>
               <li><a href="#1">Building the Parameter Domain</a></li>
               <li><a href="#2">Generate ModelAssertion and Experiment Assertion objects</a></li>
               <li><a href="#3">Build Dataset</a></li>
               <li><a href="#4">Invalidation</a></li>
            </ul>
         </div>
         <h2>Building the Parameter Domain<a name="1"></a></h2>
         <p>First we build our parameter domain by building two ParameterDomain objects, then vertically concatenating them.</p><pre class="codeinput">p1 = ParameterAssertion(<span class="string">'p'</span>,[0.5 2.1],1.3);
p1.description = <span class="string">'model_parameter'</span>;
p2 = ParameterAssertion(<span class="string">'x0'</span>,[0.3 1.2],0.7);
p2.description = <span class="string">'initial condition'</span>;
P = [p1;p2]
</pre><pre class="codeoutput">
P = 

   2 x 1 ParameterDomain

      Name      Nominal      Uncertainty Range
      p         1.30         [0.50 , 2.10 ]
      x0        0.70         [0.30 , 1.20 ]

</pre><h2>Generate ModelAssertion and Experiment Assertion objects<a name="2"></a></h2>
         <p>Now we create the ModelAssertion and ExperimentAssertion objects.</p><pre class="codeinput">ModelAssertionObj1 = ModelAssertion(@prajModel,2)
ExperimentAssertionObj1 = ExperimentAssertion(0.6,0.05)
ModelAssertionObj2 = ModelAssertion(@prajModel,4)
ExperimentAssertionObj2 = ExperimentAssertion(0.25,0.05)
</pre><pre class="codeoutput">
ModelAssertionObj1 =

   ModelAssertion
      name: prajModel_2
      type: dcModel


ExperimentAssertionObj1 =

   ExperimentAssertion
      data: 0.6
       unc: [-0.05 , 0.05]


ModelAssertionObj2 =

   ModelAssertion
      name: prajModel_4
      type: dcModel


ExperimentAssertionObj2 =

   ExperimentAssertion
      data: 0.25
       unc: [-0.05 , 0.05]

</pre><h2>Build Dataset<a name="3"></a></h2>
         <p>Now we build the Dataset units by pairing models and experiments.  We can then vertically concatenate the units to form our
            dataset.
         </p><pre class="codeinput">Unit1 = DatasetUnit(ExperimentAssertionObj1,ModelAssertionObj1,<span class="string">'x(t1) with Prajna example'</span>);
Unit2 = DatasetUnit(ExperimentAssertionObj2,ModelAssertionObj2,<span class="string">'x(t2) with Prajna example'</span>);
Dset = Dataset([Unit1; Unit2],P)
</pre><pre class="codeoutput">
Dset =

    Dataset
          Unit: [2x1 DatasetUnit]
     ParamAssn: [2x1 ParameterAssertion]

</pre><h2>Invalidation<a name="4"></a></h2>
         <p>Prajna showed this dataset to be invalid.  So we should find a negative consistency measure.</p><pre class="codeinput">opt = DCOptions(<span class="string">'display'</span>,<span class="string">'iter'</span>,<span class="string">'tol'</span>,0.1,<span class="string">'maxBranchBoundIter'</span>,6,<span class="string">'trans'</span>,{<span class="string">'linXlinY'</span>;<span class="string">'logXlinY'</span>},<span class="string">'constraints'</span>,[1 1 0 0]);
[LB, UB] = ConsistTest(Dset,opt)
</pre><pre class="codeoutput">=====Creating initial PolyDataset=====
UB: -1.098
LB: -1.23
===Iteration 2: spliting dimension p of leaf 1 at location 1.3===
UB: -1.0548
LB: -1.224
===Iteration 3: spliting dimension x0 of leaf 2 at location 0.75===
UB: -1.1888
LB: -1.2205
===Iteration 4: spliting dimension p of leaf 5 at location 0.9===
UB: -1.2003
LB: -1.2326
===Iteration 5: spliting dimension p of leaf 6 at location 0.7===
UB: -1.2166
LB: -1.2295
===Iteration 6: spliting dimension p of leaf 9 at location 0.8===
UB: -1.2176
LB: -1.224
=====The Dataset is Inconsistent=====

LB =

   -1.2240


UB =

   -1.2176

</pre><p class="footer"><br>
            Published with MATLAB&reg; 7.2<br></p>
      </div>
      <!--
##### SOURCE BEGIN #####
%% Toy Example from Stephen Prajna
% The following is a modified example presented by Stephen Prajna at the
% 2003 IEEE Conference on Decision and Control.
%
% Consider a system with the goverening differential equation:
%
% $$\dot{z}(t)=-p_{1}z(t)^{3}$$
%
% From prior information we know
%
% $$0.5<=p_{1}<=2$$
%
% And we have measurements of |z| at three times:
%
% $$z(0) \in [0.3, 1.2], 
% z(2) \in [0.55, 0.65], 
% z(4) \in [0.2, 0.3]$$
%
% To formulate this problem we shall take |p1| and |z(0)| as our two
% parameters.  There are two model files in the example folder called
% |prajModel1| and |prajModel2|.  Both files solve for z(t).  The first
% returns the value at time 2, the second at time 4.

%% Building the Parameter Domain
% First we build our parameter domain by building two ParameterDomain
% objects, then vertically concatenating them.
p1 = ParameterAssertion('p',[0.5 2.1],1.3);
p1.description = 'model_parameter';
p2 = ParameterAssertion('x0',[0.3 1.2],0.7);
p2.description = 'initial condition';
P = [p1;p2]

%% Generate ModelAssertion and Experiment Assertion objects
% Now we create the ModelAssertion and ExperimentAssertion objects.
ModelAssertionObj1 = ModelAssertion(@prajModel,2)
ExperimentAssertionObj1 = ExperimentAssertion(0.6,0.05)
ModelAssertionObj2 = ModelAssertion(@prajModel,4)
ExperimentAssertionObj2 = ExperimentAssertion(0.25,0.05)

%% Build Dataset
% Now we build the Dataset units by pairing models and experiments.  We can
% then vertically concatenate the units to form our dataset.
Unit1 = DatasetUnit(ExperimentAssertionObj1,ModelAssertionObj1,'x(t1) with Prajna example');
Unit2 = DatasetUnit(ExperimentAssertionObj2,ModelAssertionObj2,'x(t2) with Prajna example');
Dset = Dataset([Unit1; Unit2],P)

%% Invalidation
% Prajna showed this dataset to be invalid.  So we should find a negative
% consistency measure. 
opt = DCOptions('display','iter','tol',0.1,'maxBranchBoundIter',6,'trans',{'linXlinY';'logXlinY'},'constraints',[1 1 0 0]);
[LB, UB] = ConsistTest(Dset,opt)

##### SOURCE END #####
-->
   </body>
</html>